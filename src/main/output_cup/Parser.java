
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.output_cup;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.lr_parser;
import main.syntaxtree.enums.IOMode;
import main.syntaxtree.enums.Mode;
import main.syntaxtree.enums.Type;
import main.syntaxtree.nodes.BodyOp;
import main.syntaxtree.nodes.ProcFunParamOp;
import main.syntaxtree.nodes.ProgramOp;
import main.syntaxtree.nodes.expr.*;
import main.syntaxtree.nodes.expr.binExpr.*;
import main.syntaxtree.nodes.expr.constNodes.*;
import main.syntaxtree.nodes.iter.FunDeclOp;
import main.syntaxtree.nodes.iter.IterOp;
import main.syntaxtree.nodes.iter.ProcOp;
import main.syntaxtree.nodes.iter.VarDeclOp;
import main.syntaxtree.nodes.stat.*;

import java.util.HashMap;
import java.util.LinkedList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\005\012\000\002\011\006\000\002\011\002\000\002" +
    "\012\007\000\002\012\002\000\002\010\003\000\002\010" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\023\004\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\007\000\002" +
    "\021\005\000\002\021\003\000\002\020\003\000\002\020" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\024\014\000" +
    "\002\014\006\000\002\014\002\000\002\013\007\000\002" +
    "\013\002\000\002\007\005\000\002\007\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\002\000\002\027\006" +
    "\000\002\027\004\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\004\000\002" +
    "\027\004\000\002\037\003\000\002\037\010\000\002\037" +
    "\007\000\002\037\002\000\002\031\006\000\002\031\005" +
    "\000\002\030\005\000\002\030\006\000\002\030\003\000" +
    "\002\030\004\000\002\034\011\000\002\032\004\000\002" +
    "\032\002\000\002\033\006\000\002\016\004\000\002\016" +
    "\002\000\002\035\007\000\002\036\006\000\002\036\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\004\000\002\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\015\ufffd\027\004\031\011\001\002\000" +
    "\004\034\161\001\002\000\004\002\266\001\002\000\010" +
    "\015\ufffd\027\004\031\011\001\002\000\010\015\ufffd\027" +
    "\004\031\011\001\002\000\004\015\230\001\002\000\004" +
    "\034\012\001\002\000\004\021\013\001\002\000\006\022" +
    "\uffdd\034\014\001\002\000\004\023\220\001\002\000\004" +
    "\022\016\001\002\000\004\033\017\001\002\000\012\004" +
    "\023\005\020\006\022\007\024\001\002\000\012\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\001\002\000\006\023\uffd9\024" +
    "\216\001\002\000\012\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\001\002\000\012\022\ufff1\023\ufff1\024\ufff1\025\ufff1\001" +
    "\002\000\012\022\uffee\023\uffee\024\uffee\025\uffee\001\002" +
    "\000\004\023\026\001\002\000\024\020\043\027\004\032" +
    "\uffd6\034\037\036\036\043\031\065\040\066\041\067\027" +
    "\001\002\000\030\010\047\011\057\012\051\013\052\014" +
    "\055\021\053\025\uffca\034\060\051\046\055\061\064\130" +
    "\001\002\000\004\026\211\001\002\000\024\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\034\060\051\046" +
    "\055\061\001\002\000\004\025\204\001\002\000\004\025" +
    "\203\001\002\000\004\025\202\001\002\000\036\016\uffd6" +
    "\020\043\027\004\032\uffd6\034\037\036\036\037\uffd6\040" +
    "\uffd6\042\uffd6\043\031\045\uffd6\065\040\066\041\067\027" +
    "\001\002\000\024\010\047\011\057\012\051\013\052\014" +
    "\055\021\053\034\060\051\046\055\061\001\002\000\010" +
    "\021\146\024\145\026\uffe7\001\002\000\030\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\025\uffca\034\060" +
    "\051\046\055\061\064\130\001\002\000\030\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\025\uffca\034\060" +
    "\051\046\055\061\064\130\001\002\000\036\016\uffd6\020" +
    "\043\027\004\032\uffd6\034\037\036\036\037\uffd6\040\uffd6" +
    "\042\uffd6\043\031\045\uffd6\065\040\066\041\067\027\001" +
    "\002\000\024\010\047\011\057\012\051\013\052\014\055" +
    "\021\053\034\060\051\046\055\061\001\002\000\004\032" +
    "\045\001\002\000\012\002\uffdf\015\uffdf\027\uffdf\031\uffdf" +
    "\001\002\000\024\010\047\011\057\012\051\013\052\014" +
    "\055\021\053\034\060\051\046\055\061\001\002\000\046" +
    "\022\uffb7\024\uffb7\025\uffb7\041\uffb7\044\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000" +
    "\040\022\uffb9\024\122\025\uffb9\046\066\047\071\050\073" +
    "\051\063\053\064\054\076\056\072\057\065\060\075\061" +
    "\070\062\067\063\074\001\002\000\046\022\uffb5\024\uffb5" +
    "\025\uffb5\041\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\001\002\000\046\022\uffb3\024" +
    "\uffb3\025\uffb3\041\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002\000\024\010\047" +
    "\011\057\012\051\013\052\014\055\021\053\034\060\051" +
    "\046\055\061\001\002\000\004\025\117\001\002\000\046" +
    "\022\uffb2\024\uffb2\025\uffb2\041\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001\002\000" +
    "\046\022\uffb8\024\uffb8\025\uffb8\041\uffb8\044\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002" +
    "\000\046\022\uffb6\024\uffb6\025\uffb6\041\uffb6\044\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001" +
    "\002\000\050\021\113\022\uffb4\024\uffb4\025\uffb4\041\uffb4" +
    "\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\001\002\000\024\010\047\011\057\012\051\013" +
    "\052\014\055\021\053\034\060\051\046\055\061\001\002" +
    "\000\046\022\uffa3\024\uffa3\025\uffa3\041\uffa3\044\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\001" +
    "\002\000\024\010\047\011\057\012\051\013\052\014\055" +
    "\021\053\034\060\051\046\055\061\001\002\000\024\010" +
    "\047\011\057\012\051\013\052\014\055\021\053\034\060" +
    "\051\046\055\061\001\002\000\024\010\047\011\057\012" +
    "\051\013\052\014\055\021\053\034\060\051\046\055\061" +
    "\001\002\000\024\010\047\011\057\012\051\013\052\014" +
    "\055\021\053\034\060\051\046\055\061\001\002\000\024" +
    "\010\047\011\057\012\051\013\052\014\055\021\053\034" +
    "\060\051\046\055\061\001\002\000\024\010\047\011\057" +
    "\012\051\013\052\014\055\021\053\034\060\051\046\055" +
    "\061\001\002\000\024\010\047\011\057\012\051\013\052" +
    "\014\055\021\053\034\060\051\046\055\061\001\002\000" +
    "\024\010\047\011\057\012\051\013\052\014\055\021\053" +
    "\034\060\051\046\055\061\001\002\000\024\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\034\060\051\046" +
    "\055\061\001\002\000\024\010\047\011\057\012\051\013" +
    "\052\014\055\021\053\034\060\051\046\055\061\001\002" +
    "\000\024\010\047\011\057\012\051\013\052\014\055\021" +
    "\053\034\060\051\046\055\061\001\002\000\024\010\047" +
    "\011\057\012\051\013\052\014\055\021\053\034\060\051" +
    "\046\055\061\001\002\000\046\022\uffac\024\uffac\025\uffac" +
    "\041\uffac\044\uffac\046\066\047\071\050\073\051\063\053" +
    "\064\054\uffac\056\072\057\065\060\075\061\070\062\067" +
    "\063\074\064\uffac\001\002\000\046\022\uffa9\024\uffa9\025" +
    "\uffa9\041\uffa9\044\uffa9\046\066\047\071\050\073\051\063" +
    "\053\uffa9\054\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\001\002\000\046\022\uffa6\024\uffa6" +
    "\025\uffa6\041\uffa6\044\uffa6\046\066\047\071\050\073\051" +
    "\063\053\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\001\002\000\046\022\uffaf\024" +
    "\uffaf\025\uffaf\041\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\001\002\000\046\022\uffab" +
    "\024\uffab\025\uffab\041\uffab\044\uffab\046\066\047\071\050" +
    "\073\051\063\053\uffab\054\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\046\022" +
    "\uffae\024\uffae\025\uffae\041\uffae\044\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\053\uffae\054\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\001\002\000\046" +
    "\022\uffa8\024\uffa8\025\uffa8\041\uffa8\044\uffa8\046\066\047" +
    "\071\050\073\051\063\053\uffa8\054\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\001\002\000" +
    "\046\022\uffa7\024\uffa7\025\uffa7\041\uffa7\044\uffa7\046\066" +
    "\047\071\050\073\051\063\053\uffa7\054\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002" +
    "\000\046\022\uffb1\024\uffb1\025\uffb1\041\uffb1\044\uffb1\046" +
    "\uffb1\047\071\050\073\051\uffb1\053\uffb1\054\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001" +
    "\002\000\046\022\uffaa\024\uffaa\025\uffaa\041\uffaa\044\uffaa" +
    "\046\066\047\071\050\073\051\063\053\uffaa\054\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\001\002\000\046\022\uffad\024\uffad\025\uffad\041\uffad\044" +
    "\uffad\046\066\047\071\050\073\051\063\053\uffad\054\uffad" +
    "\056\072\057\065\060\075\061\070\062\067\063\074\064" +
    "\uffad\001\002\000\046\022\uffb0\024\uffb0\025\uffb0\041\uffb0" +
    "\044\uffb0\046\uffb0\047\071\050\073\051\uffb0\053\uffb0\054" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\001\002\000\026\010\047\011\057\012\051\013" +
    "\052\014\055\021\053\022\115\034\060\051\046\055\061" +
    "\001\002\000\004\022\116\001\002\000\046\022\uffbb\024" +
    "\uffbb\025\uffbb\041\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\046\022\uffbc" +
    "\024\uffbc\025\uffbc\041\uffbc\044\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\036\016" +
    "\uffd3\020\uffd3\027\uffd3\032\uffd3\034\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\042\uffd3\043\uffd3\045\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\001\002\000\034\022\121\046\066\047\071\050\073" +
    "\051\063\053\064\054\076\056\072\057\065\060\075\061" +
    "\070\062\067\063\074\001\002\000\046\022\uffa5\024\uffa5" +
    "\025\uffa5\041\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\001\002\000\024\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\034\060\051\046" +
    "\055\061\001\002\000\006\022\uffba\025\uffba\001\002\000" +
    "\046\022\uffa4\024\uffa4\025\uffa4\041\uffa4\044\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002" +
    "\000\016\016\uffd7\032\uffd7\037\uffd7\040\uffd7\042\uffd7\045" +
    "\uffd7\001\002\000\036\025\uffcd\046\066\047\071\050\073" +
    "\051\063\053\064\054\076\056\072\057\065\060\075\061" +
    "\070\062\067\063\074\064\136\001\002\000\004\025\135" +
    "\001\002\000\004\021\131\001\002\000\024\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\034\060\051\046" +
    "\055\061\001\002\000\034\022\133\046\066\047\071\050" +
    "\073\051\063\053\064\054\076\056\072\057\065\060\075" +
    "\061\070\062\067\063\074\001\002\000\030\010\047\011" +
    "\057\012\051\013\052\014\055\021\053\025\uffca\034\060" +
    "\051\046\055\061\064\130\001\002\000\004\025\uffcb\001" +
    "\002\000\036\016\uffd1\020\uffd1\027\uffd1\032\uffd1\034\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\045\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\001\002\000\004\021\137\001\002" +
    "\000\024\010\047\011\057\012\051\013\052\014\055\021" +
    "\053\034\060\051\046\055\061\001\002\000\034\022\141" +
    "\046\066\047\071\050\073\051\063\053\064\054\076\056" +
    "\072\057\065\060\075\061\070\062\067\063\074\001\002" +
    "\000\030\010\047\011\057\012\051\013\052\014\055\021" +
    "\053\025\uffca\034\060\051\046\055\061\064\130\001\002" +
    "\000\004\025\uffcc\001\002\000\004\025\144\001\002\000" +
    "\036\016\uffd2\020\uffd2\027\uffd2\032\uffd2\034\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\042\uffd2\043\uffd2\045\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\001\002\000\004\034\161\001\002\000\030" +
    "\010\047\011\057\012\051\013\052\014\055\017\151\021" +
    "\053\022\152\034\060\051\046\055\061\001\002\000\004" +
    "\022\160\001\002\000\036\022\uffc5\024\156\046\066\047" +
    "\071\050\073\051\063\053\064\054\076\056\072\057\065" +
    "\060\075\061\070\062\067\063\074\001\002\000\004\034" +
    "\153\001\002\000\004\025\uffc8\001\002\000\006\022\uffc4" +
    "\024\154\001\002\000\026\010\047\011\057\012\051\013" +
    "\052\014\055\017\151\021\053\034\060\051\046\055\061" +
    "\001\002\000\004\022\uffc6\001\002\000\026\010\047\011" +
    "\057\012\051\013\052\014\055\017\151\021\053\034\060" +
    "\051\046\055\061\001\002\000\004\022\uffc7\001\002\000" +
    "\004\025\uffc9\001\002\000\010\023\uffe7\024\145\026\uffe7" +
    "\001\002\000\006\023\uffe8\026\uffe8\001\002\000\034\041" +
    "\164\046\066\047\071\050\073\051\063\053\064\054\076" +
    "\056\072\057\065\060\075\061\070\062\067\063\074\001" +
    "\002\000\030\020\043\027\004\034\037\036\036\037\uffd6" +
    "\040\uffd6\042\uffd6\043\031\065\040\066\041\067\027\001" +
    "\002\000\010\037\uffc1\040\167\042\uffc1\001\002\000\006" +
    "\037\175\042\uffbe\001\002\000\024\010\047\011\057\012" +
    "\051\013\052\014\055\021\053\034\060\051\046\055\061" +
    "\001\002\000\010\037\uffc1\040\167\042\uffc1\001\002\000" +
    "\006\037\uffc2\042\uffc2\001\002\000\034\041\173\046\066" +
    "\047\071\050\073\051\063\053\064\054\076\056\072\057" +
    "\065\060\075\061\070\062\067\063\074\001\002\000\030" +
    "\020\043\027\004\034\037\036\036\037\uffd6\040\uffd6\042" +
    "\uffd6\043\031\065\040\066\041\067\027\001\002\000\010" +
    "\037\uffc0\040\uffc0\042\uffc0\001\002\000\024\020\043\027" +
    "\004\034\037\036\036\042\uffd6\043\031\065\040\066\041" +
    "\067\027\001\002\000\004\042\177\001\002\000\004\025" +
    "\uffc3\001\002\000\004\042\uffbf\001\002\000\016\016\uffd8" +
    "\032\uffd8\037\uffd8\040\uffd8\042\uffd8\045\uffd8\001\002\000" +
    "\036\016\uffcf\020\uffcf\027\uffcf\032\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\001\002\000\036\016\uffd4\020\uffd4\027\uffd4" +
    "\032\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\065\uffd4\066\uffd4\067\uffd4\001\002\000\036" +
    "\016\uffce\020\uffce\027\uffce\032\uffce\034\uffce\036\uffce\037" +
    "\uffce\040\uffce\042\uffce\043\uffce\045\uffce\065\uffce\066\uffce" +
    "\067\uffce\001\002\000\034\044\206\046\066\047\071\050" +
    "\073\051\063\053\064\054\076\056\072\057\065\060\075" +
    "\061\070\062\067\063\074\001\002\000\024\020\043\027" +
    "\004\034\037\036\036\043\031\045\uffd6\065\040\066\041" +
    "\067\027\001\002\000\004\045\210\001\002\000\004\025" +
    "\uffbd\001\002\000\024\010\047\011\057\012\051\013\052" +
    "\014\055\021\053\034\060\051\046\055\061\001\002\000" +
    "\004\025\213\001\002\000\036\016\uffd5\020\uffd5\027\uffd5" +
    "\032\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043" +
    "\uffd5\045\uffd5\065\uffd5\066\uffd5\067\uffd5\001\002\000\004" +
    "\025\215\001\002\000\036\016\uffd0\020\uffd0\027\uffd0\032" +
    "\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0" +
    "\045\uffd0\065\uffd0\066\uffd0\067\uffd0\001\002\000\012\004" +
    "\023\005\020\006\022\007\024\001\002\000\004\023\uffda" +
    "\001\002\000\012\004\023\005\020\006\022\007\024\001" +
    "\002\000\006\022\uffdb\024\222\001\002\000\004\034\224" +
    "\001\002\000\004\022\uffde\001\002\000\004\023\225\001" +
    "\002\000\012\004\023\005\020\006\022\007\024\001\002" +
    "\000\006\022\uffdb\024\222\001\002\000\004\022\uffdc\001" +
    "\002\000\004\034\241\001\002\000\012\002\ufff9\015\230" +
    "\027\004\031\011\001\002\000\012\002\ufff9\015\230\027" +
    "\004\031\011\001\002\000\012\002\ufff9\015\230\027\004" +
    "\031\011\001\002\000\004\002\001\001\002\000\012\002" +
    "\ufff9\015\230\027\004\031\011\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\ufffc\001\002\000\004\002\ufffb\001" +
    "\002\000\004\021\242\001\002\000\010\022\ufff6\034\243" +
    "\035\244\001\002\000\004\023\ufff3\001\002\000\004\034" +
    "\263\001\002\000\004\022\257\001\002\000\004\023\247" +
    "\001\002\000\012\004\023\005\020\006\022\007\024\001" +
    "\002\000\006\022\ufff4\024\251\001\002\000\006\034\243" +
    "\035\244\001\002\000\004\022\ufff7\001\002\000\004\023" +
    "\254\001\002\000\012\004\023\005\020\006\022\007\024" +
    "\001\002\000\006\022\ufff4\024\251\001\002\000\004\022" +
    "\ufff5\001\002\000\004\023\260\001\002\000\024\016\uffd6" +
    "\020\043\027\004\034\037\036\036\043\031\065\040\066" +
    "\041\067\027\001\002\000\004\016\262\001\002\000\012" +
    "\002\ufff8\015\ufff8\027\ufff8\031\ufff8\001\002\000\004\023" +
    "\ufff2\001\002\000\004\015\uffff\001\002\000\004\015\ufffe" +
    "\001\002\000\004\002\000\001\002\000\006\023\271\026" +
    "\272\001\002\000\044\002\uffed\015\uffed\016\uffed\020\uffed" +
    "\027\uffed\031\uffed\032\uffed\034\uffed\036\uffed\037\uffed\040" +
    "\uffed\042\uffed\043\uffed\045\uffed\065\uffed\066\uffed\067\uffed" +
    "\001\002\000\012\004\023\005\020\006\022\007\024\001" +
    "\002\000\014\010\277\011\274\012\273\013\276\014\300" +
    "\001\002\000\006\024\uffe2\025\uffe2\001\002\000\006\024" +
    "\uffe3\025\uffe3\001\002\000\004\025\304\001\002\000\006" +
    "\024\uffe1\025\uffe1\001\002\000\006\024\uffe4\025\uffe4\001" +
    "\002\000\006\024\uffe0\025\uffe0\001\002\000\006\024\302" +
    "\025\uffe6\001\002\000\014\010\277\011\274\012\273\013" +
    "\276\014\300\001\002\000\004\025\uffe5\001\002\000\006" +
    "\030\306\034\161\001\002\000\044\002\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\027\uffeb\031\uffeb\032\uffeb\034\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\001\002\000\044\002\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\027\uffe9\031\uffe9\032\uffe9\034\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\045\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\001\002\000\004\025\310\001\002\000\006\030" +
    "\312\034\161\001\002\000\044\002\uffec\015\uffec\016\uffec" +
    "\020\uffec\027\uffec\031\uffec\032\uffec\034\uffec\036\uffec\037" +
    "\uffec\040\uffec\042\uffec\043\uffec\045\uffec\065\uffec\066\uffec" +
    "\067\uffec\001\002\000\044\002\uffea\015\uffea\016\uffea\020" +
    "\uffea\027\uffea\031\uffea\032\uffea\034\uffea\036\uffea\037\uffea" +
    "\040\uffea\042\uffea\043\uffea\045\uffea\065\uffea\066\uffea\067" +
    "\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\012\002\004\003\007\023\006\024\005\001" +
    "\001\000\006\021\266\022\267\001\001\000\002\001\001" +
    "\000\010\003\264\023\006\024\005\001\001\000\010\003" +
    "\263\023\006\024\005\001\001\000\004\005\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\020\007\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\043\021\027\023" +
    "\034\027\041\031\032\034\033\035\031\001\001\000\010" +
    "\026\125\036\055\037\213\001\001\000\002\001\001\000" +
    "\006\026\204\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\200\021\027\023" +
    "\034\027\041\031\032\034\033\035\031\001\001\000\006" +
    "\026\162\036\055\001\001\000\002\001\001\000\010\026" +
    "\125\036\055\037\142\001\001\000\010\026\125\036\055" +
    "\037\126\001\001\000\020\015\124\021\027\023\034\027" +
    "\041\031\032\034\033\035\031\001\001\000\010\025\053" +
    "\026\047\036\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\123\036\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\117\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\061\036\055\001\001\000\002\001\001" +
    "\000\006\026\111\036\055\001\001\000\006\026\110\036" +
    "\055\001\001\000\006\026\107\036\055\001\001\000\006" +
    "\026\106\036\055\001\001\000\006\026\105\036\055\001" +
    "\001\000\006\026\104\036\055\001\001\000\006\026\103" +
    "\036\055\001\001\000\006\026\102\036\055\001\001\000" +
    "\006\026\101\036\055\001\001\000\006\026\100\036\055" +
    "\001\001\000\006\026\077\036\055\001\001\000\006\026" +
    "\076\036\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\113\026\047\036\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\122" +
    "\026\047\036\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\131\036\055\001\001\000" +
    "\002\001\001\000\010\026\125\036\055\037\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\137\036\055\001\001\000\002\001\001\000\010" +
    "\026\125\036\055\037\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\161\001\001" +
    "\000\010\026\147\030\146\036\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\147\030\154\036\055\001" +
    "\001\000\002\001\001\000\010\026\147\030\156\036\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\164" +
    "\021\027\023\034\027\041\031\032\034\033\035\031\001" +
    "\001\000\006\032\165\033\167\001\001\000\004\016\175" +
    "\001\001\000\006\026\171\036\055\001\001\000\006\032" +
    "\170\033\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\173\021\027\023\034\027\041\031\032\034" +
    "\033\035\031\001\001\000\002\001\001\000\020\015\177" +
    "\021\027\023\034\027\041\031\032\034\033\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\206\021\027" +
    "\023\034\027\041\031\032\034\033\035\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\211\026\047" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\020\007\216" +
    "\001\001\000\002\001\001\000\004\006\220\001\001\000" +
    "\004\013\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\225\001\001\000\004\013" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\233\005\234\023\232\024\231\001\001\000\012\004" +
    "\237\005\234\023\232\024\231\001\001\000\012\004\236" +
    "\005\234\023\232\024\231\001\001\000\002\001\001\000" +
    "\012\004\235\005\234\023\232\024\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\245\011\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\247\001\001\000\004\012\251\001\001\000\004" +
    "\010\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\254\001\001\000\004\012\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\260\021\027\023" +
    "\034\027\041\031\032\034\033\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\306\001\001\000\006\017" +
    "\300\020\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\300\020\302" +
    "\001\001\000\002\001\001\000\006\021\266\022\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\266\022\310\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter1 Procedure Iter2 
            {
              ProgramOp RESULT =null;
		int i1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i1 = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcOp p = (ProcOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Object i2 = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<IterOp> iterList = new LinkedList<IterOp>();
                                              if(i1==null) i1 = new LinkedList<IterOp>();
                                              iterList.addAll((LinkedList<IterOp>)i1);
                                              iterList.add(p);
                                              if(i2==null) i2 = new LinkedList<IterOp>();
                                              iterList.addAll((LinkedList<IterOp>)i2);
                                              RESULT = new ProgramOp(iterList);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter1 ::= VarDecl Iter1 
            {
              Object RESULT =null;
		int vdsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDeclOp> vds = (LinkedList<VarDeclOp>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		  if(i == null) i = new LinkedList<VarDeclOp>();
                                                ((LinkedList<VarDeclOp>)i).addAll(0, vds);
                                                RESULT = i;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter1 ::= Function Iter1 
            {
              Object RESULT =null;
		int fsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp fs = (FunDeclOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 if(i == null) i = new LinkedList<FunDeclOp>();
                                               ((LinkedList<FunDeclOp>)i).add(0, fs);
                                               RESULT = i;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter1 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter2 ::= VarDecl Iter2 
            {
              Object RESULT =null;
		int vdsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDeclOp> vds = (LinkedList<VarDeclOp>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		  if(i == null) i = new LinkedList<VarDeclOp>();
                                                ((LinkedList<VarDeclOp>)i).addAll(0, vds);
                                                RESULT = i;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter2 ::= Function Iter2 
            {
              Object RESULT =null;
		int fsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp fs = (FunDeclOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 if(i == null) i = new LinkedList<FunDeclOp>();
                                               ((LinkedList<FunDeclOp>)i).add(0, fs);
                                               RESULT = i;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter2 ::= Procedure Iter2 
            {
              Object RESULT =null;
		int psleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcOp ps = (ProcOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 if(i == null) i = new LinkedList<ProcOp>();
                                               ((LinkedList<ProcOp>)i).add(0, ps);
                                               RESULT = i;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter2 ::= 
            {
              Object RESULT =null;
		  RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              ProcOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<ProcFunParamOp> paramList = (LinkedList<ProcFunParamOp>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bdleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp bd = (BodyOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProcOp(new Id(id), paramList, bd);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedure",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		int procIdleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int procIdright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ProcFunParamOp procId = (ProcFunParamOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int otherParsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int otherParsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcFunParamOp> otherPars = (LinkedList<ProcFunParamOp>)((Symbol) CUP$Parser$stack.peek()).value;
		procId.type = t;
                                                                          if(otherPars==null) otherPars = new LinkedList<ProcFunParamOp>();
                                                                          otherPars.add(0, procId);
                                                                          RESULT = otherPars;
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParams",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ProcParams ::= 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParams",7, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		int procIdleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int procIdright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ProcFunParamOp procId = (ProcFunParamOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int otherParsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int otherParsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcFunParamOp> otherPars = (LinkedList<ProcFunParamOp>)((Symbol) CUP$Parser$stack.peek()).value;
		procId.type = t;
                                                                                      if(otherPars == null) otherPars = new LinkedList<ProcFunParamOp>();
                                                                                      otherPars.add(0, procId);
                                                                                      RESULT = otherPars;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OtherProcParams ::= 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",8, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ProcParamId ::= ID 
            {
              ProcFunParamOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ProcFunParamOp(Mode.INOUT, new Id(id), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",6, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ProcParamId ::= OUT ID 
            {
              ProcFunParamOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ProcFunParamOp(Mode.OUT, new Id(id), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= REAL 
            {
              Type RESULT =null;
		 RESULT = Type.REAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= VAR Decls 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int varListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDeclOp> varList = (LinkedList<VarDeclOp>)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = varList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Decls ::= Ids COLON Type SEMI Decls 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDeclOp> varList = (LinkedList<VarDeclOp>)((Symbol) CUP$Parser$stack.peek()).value;
		  HashMap<Id, ConstNode> idHash = new HashMap<Id,ConstNode>();
                                                                    for(Id id: idList){
                                                                        idHash.put(id, null);
                                                                    }
                                                                    varList.add(0, new VarDeclOp(t, idHash));
                                                                    RESULT = varList;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int constListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ConstNode> constList = (LinkedList<ConstNode>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int varListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDeclOp> varList = (LinkedList<VarDeclOp>)((Symbol) CUP$Parser$stack.peek()).value;
		  HashMap<Id, ConstNode> idHash = new HashMap<Id,ConstNode>();
                                                                    if(idList.size()!=constList.size())
                                                                        throw new Exception("Mismatch between the number of IDs and constants detected.");
                                                                    int i = 0;
                                                                    for(Id id: idList){
                                                                        idHash.put(id, constList.get(i));
                                                                        i++;
                                                                    }
                                                                    varList.add(0, new VarDeclOp(null, idHash));
                                                                    RESULT = varList;
	                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  LinkedList<VarDeclOp> varList = new LinkedList<VarDeclOp>();
	                                                                HashMap<Id, ConstNode> idHash = new HashMap<Id,ConstNode>();
	                                                                for(Id id: idList){
	                                                                    idHash.put(id, null);
	                                                                }
	                                                                varList.add(new VarDeclOp(t, idHash));
	                                                                RESULT = varList;
	                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int constListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ConstNode> constList = (LinkedList<ConstNode>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  LinkedList<VarDeclOp> varList = new LinkedList<VarDeclOp>();
                                                                    HashMap<Id, ConstNode> idHash = new HashMap<Id,ConstNode>();
                                                                    if(idList.size()!=constList.size())
                                                                        throw new Exception("Mismatch between the number of IDs and constants detected.");
                                                                    int i = 0;
                                                                    for(Id id: idList){
                                                                        idHash.put(id, constList.get(i));
                                                                        i++;
                                                                    }
                                                                    varList.add(new VarDeclOp(null, idHash));
                                                                    RESULT = varList;
	                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Ids ::= ID COMMA Ids 
            {
              LinkedList<Id> RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Id> ids = (LinkedList<Id>)((Symbol) CUP$Parser$stack.peek()).value;
		  ids.add(0, new Id(id));
                                    RESULT = ids;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ids",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Ids ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<Id> ids = new LinkedList<Id>();
                                    ids.add(0, new Id(id));
                                    RESULT = ids;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ids",15, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Consts ::= Const 
            {
              LinkedList<ConstNode> RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		ConstNode ct = (ConstNode)((Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<ConstNode> list = new LinkedList<ConstNode>();
                                            list.add(0,(ConstNode)ct);
                                            RESULT = list;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",14, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Consts ::= Const COMMA Consts 
            {
              LinkedList<ConstNode> RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ctright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ConstNode ct = (ConstNode)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ConstNode> cts = (LinkedList<ConstNode>)((Symbol) CUP$Parser$stack.peek()).value;
		  cts.add(0,ct);
                                            RESULT = cts;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Const ::= REAL_CONST 
            {
              ConstNode RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ct = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealConstNode(Float.valueOf((String)ct)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Const ::= INTEGER_CONST 
            {
              ConstNode RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ct = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConstNode(Integer.parseInt((String)ct)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Const ::= STRING_CONST 
            {
              ConstNode RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ct = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConstNode((String) ct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Const ::= TRUE 
            {
              ConstNode RESULT =null;
		 RESULT = new BoolConstNode(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Const ::= FALSE 
            {
              ConstNode RESULT =null;
		 RESULT = new BoolConstNode(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              FunDeclOp RESULT =null;
		int funcNameleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int funcNameright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String funcName = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paramListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<ProcFunParamOp> paramList = (LinkedList<ProcFunParamOp>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int typeListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Type> typeList = (LinkedList<Type>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunDeclOp(new Id(funcName), paramList, typeList, b);
                                                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int otherParamsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int otherParamsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcFunParamOp> otherParams = (LinkedList<ProcFunParamOp>)((Symbol) CUP$Parser$stack.peek()).value;
		if(otherParams == null) otherParams = new LinkedList<ProcFunParamOp>();
                                                                          ProcFunParamOp p = new ProcFunParamOp(Mode.IN, new Id(id), type);
                                                                          otherParams.add(0, p);
                                                                          RESULT = otherParams;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FuncParams ::= 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int otherParamsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int otherParamsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcFunParamOp> otherParams = (LinkedList<ProcFunParamOp>)((Symbol) CUP$Parser$stack.peek()).value;
		 if(otherParams == null) otherParams = new LinkedList<ProcFunParamOp>();
                                                                                    ProcFunParamOp p = new ProcFunParamOp(Mode.IN, new Id(id), type);
                                                                                    otherParams.add(0, p);
                                                                                    RESULT = otherParams;
                                                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",9, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherFuncParams ::= 
            {
              LinkedList<ProcFunParamOp> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",9, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Types ::= Type COMMA Types 
            {
              LinkedList<Type> RESULT =null;
		int typeleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Type> typeList = (LinkedList<Type>)((Symbol) CUP$Parser$stack.peek()).value;
		 typeList.add(0, type);
                                                    RESULT = typeList;
                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Types ::= Type 
            {
              LinkedList<Type> RESULT =null;
		int typeleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Type> types = new LinkedList<>();
	                                                types.add(0, type);
	                                                RESULT = types;
                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",5, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              BodyOp RESULT =null;
		int varListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDeclOp> varList = (LinkedList<VarDeclOp>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((Symbol)CUP$Parser$stack.peek()).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.peek()).value;
		  b.varDeclOpList.addAll(0, varList);
                                        RESULT = b;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int stleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat st = (Stat)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((Symbol)CUP$Parser$stack.peek()).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.peek()).value;
		  b.statList.add(0, st);
                                        RESULT = b;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              BodyOp RESULT =null;
		  RESULT = new BodyOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",11, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int idListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Id> idList = (LinkedList<Id>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if(idList.size()!=exprList.size())
                                                        throw new Exception("Mismatch between the number of IDs and exprs detected.");
                                                    RESULT = new AssignOp(idList, exprList);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Stat RESULT =null;
		int procCallleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procCallright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcCallOp procCall = (ProcCallOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = procCall;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprList = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnOp(exprList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              Stat RESULT =null;
		int ioArgsListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ioArgsListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> ioArgsList = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new IOArgsOp(IOMode.WRITE, ioArgsList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Stat RESULT =null;
		int ioArgsListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ioArgsListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> ioArgsList = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new IOArgsOp(IOMode.WRITERETURN, ioArgsList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              Stat RESULT =null;
		int ioArgsListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ioArgsListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> ioArgsList = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new IOArgsOp(IOMode.READ, ioArgsList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifStatleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifStatright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfOp ifStat = (IfOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ifStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whileStatleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whileStatright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileOp whileStat = (WhileOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = whileStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IOArgs ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Expr> exprList = new LinkedList<Expr>();
                                                                      exprList.add(0, e);
                                                                      RESULT = exprList;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",29, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IOArgs ::= Expr DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              LinkedList<Expr> RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ioArgsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ioArgsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> ioArgs = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.peek()).value;
		if(ioArgs == null) ioArgs = new LinkedList<Expr>();
                                                                      ioArgs.add(0, e2);
                                                                      ioArgs.add(0, e1);
                                                                      RESULT = ioArgs;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ioArgsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ioArgsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> ioArgs = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.peek()).value;
		if(ioArgs == null) ioArgs = new LinkedList<Expr>();
                                                                      ioArgs.add(0, e);
                                                                      RESULT = ioArgs;
                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IOArgs ::= 
            {
              LinkedList<Expr> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",29, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ProcExpr> exprList = (LinkedList<ProcExpr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProcCallOp(new Id(id), exprList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",23, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ProcCallOp(new Id(id), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",23, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              LinkedList<ProcExpr> RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcExpr> exprList = (LinkedList<ProcExpr>)((Symbol) CUP$Parser$stack.peek()).value;
		exprList.add(0, new ProcExpr(false, expr));
                                                      RESULT = exprList;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",22, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              LinkedList<ProcExpr> RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcExpr> exprList = (LinkedList<ProcExpr>)((Symbol) CUP$Parser$stack.peek()).value;
		exprList.add(0, new ProcExpr(true, new Id(id)));
	                                                  RESULT = exprList;
	                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",22, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ProcExprs ::= Expr 
            {
              LinkedList<ProcExpr> RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<ProcExpr> procExprList = new LinkedList<>();
                                                      procExprList.add(0, new ProcExpr(false, expr));
                                                      RESULT = procExprList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",22, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ProcExprs ::= REF ID 
            {
              LinkedList<ProcExpr> RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<ProcExpr> procExprList = new LinkedList<>();
                                                      procExprList.add(0, new ProcExpr(true, new Id(id)));
	                                                  RESULT = procExprList;
	                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",22, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfOp RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expr = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elifsleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elifsright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ElifOp> elifs = (LinkedList<ElifOp>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp el = (BodyOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new IfOp(expr, b, elifs, el);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",26, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Elifs ::= Elif Elifs 
            {
              LinkedList<ElifOp> RESULT =null;
		int elifleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElifOp elif = (ElifOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elifsleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int elifsright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ElifOp> elifs = (LinkedList<ElifOp>)((Symbol) CUP$Parser$stack.peek()).value;
		if(elifs == null) elifs = new LinkedList<ElifOp>();
                                                      elifs.add(0, elif);
                                                      RESULT = elifs;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elifs",24, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Elifs ::= 
            {
              LinkedList<ElifOp> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elifs",24, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((Symbol)CUP$Parser$stack.peek()).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElifOp(expr, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif",25, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((Symbol)CUP$Parser$stack.peek()).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",12, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",12, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOp RESULT =null;
		int exprleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp b = (BodyOp)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new WhileOp(expr, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",27, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> e = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FunCallOp(new Id(id), e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new FunCallOp(new Id(id), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exprs ::= Expr COMMA Exprs 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eListleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eListright = ((Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> eList = (LinkedList<Expr>)((Symbol) CUP$Parser$stack.peek()).value;
		eList.add(0, e);
                                          RESULT = eList;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exprs ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Expr> exprList = new LinkedList<>();
                                          exprList.add(0, e);
                                          RESULT = exprList;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",19, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int fcleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((Symbol)CUP$Parser$stack.peek()).right;
		FunCallOp fc = (FunCallOp)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = fc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ct = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new RealConstNode(Float.valueOf((String)ct));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ct = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntConstNode(Integer.parseInt((String)ct));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int ctleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object ct = (Object)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StringConstNode((String) ct);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Id(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT = new BoolConstNode(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT = new BoolConstNode(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AddOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DiffOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MulOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DivOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AndOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new OrOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new GtOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new GeOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LtOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LeOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new EqOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new NeOp(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new BracketsOp(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MinusOp(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NotOp(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
